{"version":3,"sources":["ressources.js","Pomodoro.jsx","index.js","App.jsx"],"names":["timeModifier","time","operator","timeModification","Error","split","hour","min","sec","newTime","map","x","formatTimeNum","num","join","ActualSession","props","className","session","timer","onClick","funcBt1","isRunning","funcBt2","funcBt3","SessionTimer","compName","Pomodoro","useState","defaultTime","setDefaultTime","setTimer","defaultBreakTime","setBreakDefaultTime","setIsRunning","isBreakTime","setBreakTime","next","useEffect","minusPlus","op","setterFunc","defaultTimeToChange","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2da2a587.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\nexport const formatTimeNum = num => {\r\n  num < 10 ? (num = `0${num}`) : (num = `${num}`);\r\n  return num;\r\n};\r\n\r\nexport const timeModifier = (time, operator, timeModification) => {\r\n  if (operator !== \"+\" && operator !== \"-\") throw Error;\r\n  time = time.split(\":\");\r\n  let [hour, min, sec] = time;\r\n  time = 60 * 60 * +hour + 60 * +min + +sec;\r\n  timeModification = timeModification.split(\":\");\r\n  let [hourModification, minModification, secModification] = timeModification;\r\n  timeModification =\r\n    60 * 60 * +hourModification + 60 * +minModification + +secModification;\r\n\r\n  operator === \"+\"\r\n    ? (timeModification = +timeModification)\r\n    : (timeModification = -timeModification);\r\n\r\n  // total time in seconds\r\n  let newTime = time + timeModification;\r\n  if (newTime > 0) {\r\n    // decomposition: seconds\r\n    sec = newTime % 60;\r\n    // rest in sec convert in min\r\n    newTime = (newTime - sec) / 60;\r\n    // decomposition in min\r\n    min = newTime % 60;\r\n    // rest in min convert in hour\r\n    newTime = (newTime - min) / 60;\r\n    hour = newTime % 60;\r\n    newTime = [hour, min, sec].map(x => formatTimeNum(x));\r\n    newTime = newTime.join(\":\");\r\n  } else {\r\n    newTime = \"00:00:00\";\r\n  }\r\n  return newTime;\r\n};\r\n\r\n// Thanks to Dan Abramov : https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\n// This function is a declarative implementation of setInterval\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { timeModifier, useInterval } from \"./ressources\";\r\nimport \"./Pomodoro.scss\";\r\n\r\nconst Pomodoro = () => {\r\n  const [defaultTime, setDefaultTime] = useState(\"00:25:00\");\r\n  const [timer, setTimer] = useState(defaultTime);\r\n  const [defaultBreakTime, setBreakDefaultTime] = useState(\"00:05:00\");\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isBreakTime, setBreakTime] = useState(false);\r\n\r\n  const startStop = () => {\r\n    if (isRunning) {\r\n      setIsRunning(false);\r\n    } else {\r\n      setIsRunning(true);\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setTimer(isBreakTime ? defaultBreakTime : defaultTime);\r\n  };\r\n\r\n  const next = () => {\r\n    setBreakTime(!isBreakTime);\r\n    // This can't be done here, it is done in the effect below because\r\n    // isBreakTime isn't set when the condition is evaluated.\r\n    // setTimer(isBreakTime ? defaultBreakTime : defaultTime);\r\n  };\r\n  // Next part of the next function\r\n  useEffect(() => {\r\n    setTimer(isBreakTime ? defaultBreakTime : defaultTime);\r\n  }, [isBreakTime]); // We don't put defaultBreakTime and defaultTime there because we don't want the hook to fire everytime one of them change\r\n\r\n  const minusPlus = (op, setterFunc, defaultTimeToChange) => {\r\n    setterFunc(timeModifier(defaultTimeToChange, op, \"00:01:00\"));\r\n  };\r\n\r\n  useInterval(() => {\r\n    if (isRunning && timer !== \"00:00:00\") {\r\n      setTimer(timeModifier(timer, \"-\", \"00:00:01\"));\r\n    } else if (isRunning) {\r\n      // thus it is 00:00:00\r\n      next();\r\n    }\r\n  }, 1000);\r\n\r\n  // condition on the rended timer for further development\r\n  return (\r\n    <div className=\"pomodoro\">\r\n      <h1>Pomodoro</h1>\r\n      <div className=\"flexRaw\">\r\n        <ActualSession\r\n          session={isBreakTime ? \"Break Time\" : \"Work session\"}\r\n          timer={timer}\r\n          funcBt1={startStop}\r\n          funcBt2={reset}\r\n          funcBt3={next}\r\n          isRunning={isRunning}\r\n        />\r\n        <div className=\"parameters\">\r\n          <SessionTimer\r\n            compName={\"Session timer\"}\r\n            timer={defaultTime}\r\n            funcBt1={() => minusPlus(\"-\", setDefaultTime, defaultTime)}\r\n            funcBt2={() => minusPlus(\"+\", setDefaultTime, defaultTime)}\r\n          />\r\n          <SessionTimer\r\n            compName={\"Break timer\"}\r\n            timer={defaultBreakTime}\r\n            funcBt1={() =>\r\n              minusPlus(\"-\", setBreakDefaultTime, defaultBreakTime)\r\n            }\r\n            funcBt2={() =>\r\n              minusPlus(\"+\", setBreakDefaultTime, defaultBreakTime)\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ActualSession = props => {\r\n  return (\r\n    <div className=\"actualSession\">\r\n      <h2>{props.session}</h2>\r\n      <h2>{props.timer}</h2>\r\n      <div>\r\n        <button onClick={props.funcBt1}>\r\n          {props.isRunning ? \"Stop\" : \"Start\"}\r\n        </button>\r\n        {props.isRunning ? null : (\r\n          <button onClick={props.funcBt2}>Reset</button>\r\n        )}\r\n      </div>\r\n      <button onClick={props.funcBt3}>Next</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SessionTimer = props => {\r\n  return (\r\n    <div className=\"compName\">\r\n      <h2>{props.compName}</h2>\r\n      <h2>{props.timer}</h2>\r\n      <div>\r\n        <button onClick={props.funcBt1}>-</button>\r\n        <button onClick={props.funcBt2}>+</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pomodoro;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n","import React from \"react\";\nimport Pomodoro from \"./Pomodoro\";\nimport \"./styles.scss\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Pomodoro />\n    </div>\n  );\n}\n"],"sourceRoot":""}